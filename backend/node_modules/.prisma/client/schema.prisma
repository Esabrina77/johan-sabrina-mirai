// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//configuration de la connexion à la base de données POSTGRESQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  freelancer
  company
}

model User {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String    @unique
  password                 String
  role                     Role      @default(freelancer)
  verificationCode         String?   @db.VarChar(6)
  emailVerified            Boolean   @default(false)
  emailVerificationExpires DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  profile          Profile?
  missions         Mission[]
  applications     Application[]
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  matchings        Matching[]
  reviews          Review[]      @relation("UserReviews")
  givenReviews     Review[]      @relation("ReviewerReviews")

  @@map("users")
}

model Profile {
  id      Int  @id @default(autoincrement())
  userId  Int  @unique @map("user_id")
  type    Role
  details Json

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Mission {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  title       String
  description String
  budget      Decimal       @db.Decimal(10, 2)
  status      MissionStatus @default(pending)
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  transaction  Transaction?
  matchings    Matching[]

  @@map("missions")
}

model Application {
  id          Int               @id @default(autoincrement())
  userId      Int               @map("user_id")
  missionId   Int               @map("mission_id")
  status      ApplicationStatus @default(sent)
  dateApplied DateTime          @default(now()) @map("date_applied")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model Transaction {
  id        Int               @id @default(autoincrement())
  missionId Int               @unique @map("mission_id")
  amount    Decimal           @db.Decimal(10, 2)
  status    TransactionStatus @default(pending)
  date      DateTime          @default(now())

  // Relations
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  content    String
  timestamp  DateTime @default(now())

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Matching {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  missionId   Int      @map("mission_id")
  score       Float
  dateMatched DateTime @default(now()) @map("date_matched")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("matching")
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  reviewerId Int      @map("reviewer_id")
  rating     Int
  comment    String?
  date       DateTime @default(now())

  // Relations
  user     User @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  reviewer User @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum MissionStatus {
  pending
  inprogress
  completed
}

enum ApplicationStatus {
  sent
  accepted
  rejected
}

enum TransactionStatus {
  pending
  paid
  canceled
}
