// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//configuration de la connexion à la base de données POSTGRESQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(freelancer)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  profile       Profile?
  missions      Mission[]      @relation("CompanyMissions")
  applications  Application[]  @relation("FreelancerApplications")
  conversations Conversation[] @relation("ConversationParticipants")
  sentMessages  Message[]      @relation("MessageSender")
  matchings     Matching[]
  reviews       Review[]       @relation("UserReviews")
  givenReviews  Review[]       @relation("ReviewerReviews")

  @@map("users")
}

model Profile {
  id      Int  @id @default(autoincrement())
  userId  Int  @unique @map("user_id")
  type    Role
  details Json

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Mission {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  budget         Decimal
  status         MissionStatus @default(pending)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  companyId      Int           @map("company_id")
  requiredSkills String[] // Compétences requises pour la mission
  category       String // Catégorie de la mission (ex: "développement", "design", "marketing", etc.)

  // Relations
  company      User          @relation("CompanyMissions", fields: [companyId], references: [id])
  applications Application[]
  matchings    Matching[]
  transaction  Transaction?
  reviews      Review[]

  @@map("missions")
}

model Application {
  id           Int               @id @default(autoincrement())
  status       ApplicationStatus @default(sent)
  createdAt    DateTime          @default(now()) @map("created_at")
  freelancerId Int               @map("freelancer_id")
  missionId    Int               @map("mission_id")

  // Relations
  freelancer User    @relation("FreelancerApplications", fields: [freelancerId], references: [id])
  mission    Mission @relation(fields: [missionId], references: [id])

  @@map("applications")
}

model Transaction {
  id        Int               @id @default(autoincrement())
  missionId Int               @unique @map("mission_id")
  amount    Decimal           @db.Decimal(10, 2)
  status    TransactionStatus @default(pending)
  date      DateTime          @default(now())

  // Relations
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Conversation {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  read           Boolean      @default(false)

  @@index([conversationId])
  @@index([senderId])
}

model Matching {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  missionId   Int      @map("mission_id")
  score       Float
  dateMatched DateTime @default(now()) @map("date_matched")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("matching")
}

model Review {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  reviewerId Int        @map("reviewer_id")
  missionId  Int        @map("mission_id")
  rating     Int // Note de 1 à 5
  comment    String?
  type       ReviewType @default(company_to_freelancer)
  date       DateTime   @default(now())

  // Relations
  user     User    @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  reviewer User    @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  mission  Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@unique([missionId, reviewerId])
  @@map("reviews")
}

enum Role {
  freelancer
  company
}

enum MissionStatus {
  pending
  in_progress
  completed
  cancelled
}

enum ApplicationStatus {
  sent
  accepted
  rejected
}

enum TransactionStatus {
  pending
  paid
  canceled
}

enum ReviewType {
  company_to_freelancer
  freelancer_to_company
}
